package mocks

import client "github.com/NetSys/quilt/api/client"
import mock "github.com/stretchr/testify/mock"

// Getter is an autogenerated mock type for the Getter type
type Getter struct {
	mock.Mock
}

// Client provides a mock function with given fields: _a0
func (_m *Getter) Client(_a0 string) (client.Client, error) {
	ret := _m.Called(_a0)

	var r0 client.Client
	if rf, ok := ret.Get(0).(func(string) client.Client); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContainerClient provides a mock function with given fields: _a0, _a1
func (_m *Getter) ContainerClient(_a0 client.Client, _a1 string) (client.Client, error) {
	ret := _m.Called(_a0, _a1)

	var r0 client.Client
	if rf, ok := ret.Get(0).(func(client.Client, string) client.Client); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(client.Client, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LeaderClient provides a mock function with given fields: _a0
func (_m *Getter) LeaderClient(_a0 client.Client) (client.Client, error) {
	ret := _m.Called(_a0)

	var r0 client.Client
	if rf, ok := ret.Get(0).(func(client.Client) client.Client); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(client.Client) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

var _ client.Getter = (*Getter)(nil)
