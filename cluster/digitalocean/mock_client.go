package digitalocean

import godo "github.com/digitalocean/godo"
import mock "github.com/stretchr/testify/mock"

// mockClient is an autogenerated mock type for the client type
type mockClient struct {
	mock.Mock
}

// CreateDroplet provides a mock function with given fields: _a0
func (_m *mockClient) CreateDroplet(_a0 *godo.DropletCreateRequest) (*godo.Droplet, *godo.Response, error) {
	ret := _m.Called(_a0)

	var r0 *godo.Droplet
	if rf, ok := ret.Get(0).(func(*godo.DropletCreateRequest) *godo.Droplet); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Droplet)
		}
	}

	var r1 *godo.Response
	if rf, ok := ret.Get(1).(func(*godo.DropletCreateRequest) *godo.Response); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*godo.DropletCreateRequest) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteDroplet provides a mock function with given fields: _a0
func (_m *mockClient) DeleteDroplet(_a0 int) (*godo.Response, error) {
	ret := _m.Called(_a0)

	var r0 *godo.Response
	if rf, ok := ret.Get(0).(func(int) *godo.Response); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDroplet provides a mock function with given fields: _a0
func (_m *mockClient) GetDroplet(_a0 int) (*godo.Droplet, *godo.Response, error) {
	ret := _m.Called(_a0)

	var r0 *godo.Droplet
	if rf, ok := ret.Get(0).(func(int) *godo.Droplet); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Droplet)
		}
	}

	var r1 *godo.Response
	if rf, ok := ret.Get(1).(func(int) *godo.Response); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListDroplets provides a mock function with given fields: _a0
func (_m *mockClient) ListDroplets(_a0 *godo.ListOptions) ([]godo.Droplet, *godo.Response, error) {
	ret := _m.Called(_a0)

	var r0 []godo.Droplet
	if rf, ok := ret.Get(0).(func(*godo.ListOptions) []godo.Droplet); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]godo.Droplet)
		}
	}

	var r1 *godo.Response
	if rf, ok := ret.Get(1).(func(*godo.ListOptions) *godo.Response); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*godo.ListOptions) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

var _ client = (*mockClient)(nil)
